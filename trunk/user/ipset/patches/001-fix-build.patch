From a1ccbae83744041bddf4038323a3428e8a20ef72 Mon Sep 17 00:00:00 2001
From: Serhey Popovych <serhe.popovych@gmail.com>
Date: Fri, 29 Nov 2019 11:21:27 +0200
Subject: configure.ac: Better match for ipv6_skip_exthdr() frag_offp arg
 presence

On older kernels (i.e. ones before commit 5c3a0fd7d0fc ("ip*.h: Remove
extern from function prototypes") in upstream since v3.13) we fail to
match number of arguments ipv6_skip_exthdr() correctly. Configure
chooses 3 args, while function has actually 4 args.

This happens because on these kernels tab (\t) is used for intendation
between function result type and function name.

Fix by matching either space for kernels with mentioned change or tab
for older kernels to select number of arguments correctly.

Signed-off-by: Serhey Popovych <serhe.popovych@gmail.com>
Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
---
 configure.ac | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

 From bb750b8ded015c4447cc2eee601709f50d06574e Mon Sep 17 00:00:00 2001
From: Serhey Popovych <serhe.popovych@gmail.com>
Date: Fri, 29 Nov 2019 11:21:28 +0200
Subject: configure.ac: Add cond_resched_rcu() checks

It was introduced with commit f6f3c437d09e ("sched: add cond_resched_rcu()
helper") since v3.11 upstream kernel.

To support building on older kernels add implementation to ip_set_compat.h.

Signed-off-by: Serhey Popovych <serhe.popovych@gmail.com>
Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
---
 configure.ac                                            | 10 ++++++++++
 kernel/include/linux/netfilter/ipset/ip_set_compat.h.in | 12 ++++++++++++
 2 files changed, 22 insertions(+)

 From de06e92fc9b22f9c78316a2f2f4bc524696a91f6 Mon Sep 17 00:00:00 2001
From: Serhey Popovych <serhe.popovych@gmail.com>
Date: Fri, 29 Nov 2019 11:21:29 +0200
Subject: configure.ac: Build on kernels without skb->vlan_proto correctly

Support for EtherType other than ETH_P_8021Q for VLAN header introduced
with commit 86a9bad3ab6b ("net: vlan: add protocol argument to packet
tagging functions") in upstream kernel since v3.10.

To support build on older kernels check for ->vlan_proto presence in
@struct sk_buff and return htons(ETH_P_8021Q) when it is missing.

Signed-off-by: Serhey Popovych <serhe.popovych@gmail.com>
Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
---
 configure.ac                                            | 11 +++++++++++
 kernel/include/linux/netfilter/ipset/ip_set_compat.h.in |  4 ++++
 2 files changed, 15 insertions(+)
 
--- ipset-7.1/configure.ac
+++ ipset-7.1/configure.ac
@@ -325,7 +325,7 @@
 
 AC_MSG_CHECKING([kernel source for ipv6_skip_exthdr args])
 if test -f $ksourcedir/include/net/ipv6.h && \
-   $AWK '/ ipv6_skip_exthdr\(/,/\)/' $ksourcedir/include/net/ipv6.h | $GREP -q 'frag_offp'; then
+   $AWK '/( |\t)ipv6_skip_exthdr\(/,/\)/' $ksourcedir/include/net/ipv6.h | $GREP -q 'frag_offp'; then
 	AC_MSG_RESULT(4 args)
 	AC_SUBST(HAVE_IPV6_SKIP_EXTHDR_ARGS, 4)
 else
@@ -333,6 +333,16 @@
 	AC_SUBST(HAVE_IPV6_SKIP_EXTHDR_ARGS, 3)
 fi
 
+AC_MSG_CHECKING([kernel source for cond_resched_rcu])
+if test -f $ksourcedir/include/linux/sched.h && \
+   $AWK '/( |\t)cond_resched_rcu\(/,/\)/' $ksourcedir/include/linux/sched.h | $GREP -q 'cond_resched_rcu'; then
+	AC_MSG_RESULT(yes)
+	AC_SUBST(HAVE_COND_RESCHED_RCU, define)
+else
+	AC_MSG_RESULT(no)
+	AC_SUBST(HAVE_COND_RESCHED_RCU, undef)
+fi
+
 AC_MSG_CHECKING([kernel source for bool checkentry function prototype])
 if test -f $ksourcedir/include/linux/netfilter/x_tables.h && \
    $GREP -q 'bool .\*checkentry.' $ksourcedir/include/linux/netfilter/x_tables.h; then
@@ -525,6 +535,17 @@
 else
 	AC_MSG_RESULT(no)
 	AC_SUBST(HAVE_TC_SKB_PROTOCOL, undef)
+
+	AC_MSG_CHECKING([kernel source for vlan_proto in struct sk_buff])
+	if test -f $ksourcedir/include/linux/skbuff.h && \
+	   $AWK '/^struct sk_buff {/,/^};$/' $ksourcedir/include/linux/skbuff.h | \
+	   $GREP -q 'vlan_proto'; then
+		AC_MSG_RESULT(yes)
+		AC_SUBST(HAVE_VLAN_PROTO_IN_SK_BUFF, define)
+	else
+		AC_MSG_RESULT(no)
+		AC_SUBST(HAVE_VLAN_PROTO_IN_SK_BUFF, undef)
+	fi
 fi
 
 AC_MSG_CHECKING([kernel source for struct net in struct xt_action_param])
--- ipset-7.1/kernel/include/linux/netfilter/ipset/ip_set_compat.h.in
+++ ipset-7.1/kernel/include/linux/netfilter/ipset/ip_set_compat.h.in
@@ -49,6 +49,7 @@
 #@HAVE_TIMER_SETUP@ HAVE_TIMER_SETUP
 #@HAVE_STRSCPY@ HAVE_STRSCPY
 #@HAVE_LOCKDEP_NFNL_IS_HELD@ HAVE_LOCKDEP_NFNL_IS_HELD
+#@HAVE_COND_RESCHED_RCU@ HAVE_COND_RESCHED_RCU
 
 #ifdef HAVE_EXPORT_SYMBOL_GPL_IN_MODULE_H
 #include <linux/module.h>
@@ -143,6 +144,17 @@
 #endif
 #endif
 
+#ifndef HAVE_COND_RESCHED_RCU
+static inline void cond_resched_rcu(void)
+{
+#if defined(CONFIG_DEBUG_ATOMIC_SLEEP) || !defined(CONFIG_PREEMPT_RCU)
+	rcu_read_unlock();
+	cond_resched();
+	rcu_read_lock();
+#endif
+}
+#endif
+
 #if defined(CONFIG_NETFILTER_NETLINK) || defined(CONFIG_NETFILTER_NETLINK_MODULE)
 #else
 #error "NETFILTER_NETLINK must be enabled: select NFACCT/NFQUEUE/LOG over NFNETLINK"
@@ -318,7 +330,11 @@
 static inline __be16 tc_skb_protocol(const struct sk_buff *skb)
 {
 	if (vlan_tx_tag_present(skb))
+#ifdef HAVE_VLAN_PROTO_IN_SK_BUFF
 		return skb->vlan_proto;
+#else
+		return htons(ETH_P_8021Q);
+#endif
 	return skb->protocol;
 }
 #endif
