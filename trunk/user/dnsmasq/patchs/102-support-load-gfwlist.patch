From dbe29adbf95d88cf35adcc00a8b994d350122d12 Mon Sep 17 00:00:00 2001
From: Yonsm <Yonsm@qq.com>
Date: Sun, 13 Sep 2020 00:25:33 +0800
Subject: [PATCH] Support load gfwlist.txt (equals to add with --server and
 --ipset one by one) (#419)

e.g. "--gfwlist=/etc/storage/dnsmasq/gfwlist.conf@8.8.8.8#53^gfwlist" equals to multiple line as below:
server=/xxx.xxx/8.8.8.8#53
ipset=/xxx.xxx/gfwlist
---
 trunk/user/dnsmasq/dnsmasq-2.8x/src/option.c | 79 +++++++++++++++++++-
 1 file changed, 78 insertions(+), 1 deletion(-)

diff --git a/trunk/user/dnsmasq/dnsmasq-2.8x/src/option.c b/trunk/user/dnsmasq/dnsmasq-2.8x/src/option.c
index f05b2f2287b..28a44ab007e 100644
--- a/trunk/user/dnsmasq/dnsmasq-2.8x/src/option.c
+++ b/trunk/user/dnsmasq/dnsmasq-2.8x/src/option.c
@@ -168,6 +168,7 @@ struct myoption {
 #define LOPT_NAME_MATCH    355
 #define LOPT_CAA           356
 #define LOPT_FILTER_AAAA   357
+#define LOPT_GFWLIST       358
 #define LOPT_DHCP_TO_HOST  359
 
 #ifdef HAVE_GETOPT_LONG
@@ -342,6 +343,7 @@ static const struct myoption opts[] =
     { "dumpfile", 1, 0, LOPT_DUMPFILE },
     { "dumpmask", 1, 0, LOPT_DUMPMASK },
     { "filter-aaaa", 0, 0, LOPT_FILTER_AAAA },
+     { "gfwlist", 1, 0, LOPT_GFWLIST },
     { "dhcp-to-host", 0, 0, LOPT_DHCP_TO_HOST },
     { NULL, 0, 0, 0 }
   };
@@ -523,6 +525,7 @@ static struct {
   { LOPT_DUMPFILE, ARG_ONE, "<path>", gettext_noop("Path to debug packet dump file"), NULL },
   { LOPT_DUMPMASK, ARG_ONE, "<hex>", gettext_noop("Mask which packets to dump"), NULL },
   { LOPT_FILTER_AAAA, OPT_FILTER_AAAA, NULL, gettext_noop("Filter all AAAA requests."), NULL },
+   { LOPT_GFWLIST, ARG_DUP, "<path|domain>[@server][^ipset]", gettext_noop("Gfwlist path or domain to special server (default 8.8.8.8~53) and ipset (default gfwlist, pass ^ only to skip default ipset)"), NULL },
   { LOPT_DHCP_TO_HOST, OPT_DHCP_TO_HOST, NULL, gettext_noop("Keep DHCP hostname valid at all times."), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
@@ -1930,7 +1933,14 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
     case LOPT_SERVERS_FILE:
       daemon->servers_file = opt_string_alloc(arg);
       break;
      
+    case LOPT_GFWLIST:
+      {
+        void load_gfwlist(char *gfwlist);
+        load_gfwlist(arg);
+      }
+      break;
+
     case 'm':  /* --mx-host */
       {
 	int pref = 1;
@@ -4814,6 +4824,73 @@ void read_servers_file(void)
   read_file(daemon->servers_file, f, LOPT_REV_SERV);
 }
 
+void add_gfwline(char *gfwline, const char *server, const char *ipset)
+{
+  char *end = gfwline + 1;
+  while (*end && *end != '#' && *end != '\n' && *end != '\r') end++;
+  for (char *buf = end; buf >= gfwline; buf--) {
+    if (*buf == ',' || buf == gfwline) {
+      if (buf + 1 < end) {
+        *buf = '/';
+        *end++ = '/';
+
+#ifdef HAVE_IPSET
+        if (*ipset) {
+          strcpy(end, ipset);
+          one_opt(LOPT_IPSET, buf, _("gfwlist"), _("error"), 0, 0);
+          end[-1] = '/';
+        }
+#endif
+        strcpy(end, server);
+        one_opt('S', buf, _("gfwlist"), _("error"), 0, 0);
+     }
+      end = buf;
+    }
+  }
+}
+
+void load_gfwlist(char *gfwlist)
+{
+	char *cfg_server = NULL, *cfg_ipset = NULL;
+	for (char *p = gfwlist; *p; p++) {
+		if (*p == '@') cfg_server = p;
+		else if (*p == '^') cfg_ipset = p;
+	}
+
+	const char *server, *ipset;
+  if (cfg_server) {
+    *cfg_server = 0;
+    server = cfg_server + 1;
+  } else {
+    server = "8.8.8.8~53";
+  }
+	if (cfg_ipset) {
+    *cfg_ipset = 0;
+    ipset = cfg_ipset + 1;
+  } else {
+    ipset = "gfwlist";
+  }
+
+  FILE *f = NULL;
+  do {
+    if (*gfwlist == '/') {
+    	if (!(f = fopen(gfwlist, "r"))) {
+    		my_syslog(LOG_ERR, _("cannot read %s: %s"), gfwlist, strerror(errno));
+    		break;
+    	}
+      for (char buf[MAXDNAME]; fgets(buf+ 1, MAXDNAME - 1, f); add_gfwline(buf, server, ipset));
+    } else {
+      char old = gfwlist[-1];
+      add_gfwline(gfwlist - 1, server, ipset);
+      gfwlist[-1] = old;
+    }
+  } while (0);
+
+  if (f) fclose(f);
+  if (cfg_server) *cfg_server = '@';
+  if (cfg_ipset) *cfg_ipset = '^';
+}
+
 #ifdef HAVE_DHCP
 static void clear_dynamic_conf(void)
 {